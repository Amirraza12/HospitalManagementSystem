#model data

from django.db import models
from django.contrib.auth.models import BaseUserManager,AbstractBaseUser

#  Custom User Manager
class UserManager(BaseUserManager):
  def create_user(self, email, name ,father_name ,DOB, city,adress,image, tc, password=None, password2=None):
      """
      Creates and saves a User with the given email, name, tc and password.
      """
      if not email:
          raise ValueError('User must have an email address')

      user = self.model(
          email=self.normalize_email(email),
          name=name,
          father_name=father_name,
          DOB=DOB,
          city=city,
          adress=adress,
          image=image,
          tc=tc,
      )

      user.set_password(password)
      user.save(using=self._db)
      return user

  def create_superuser(self, email, name,father_name, DOB,city,adress,image,tc, password=None):
      """
      Creates and saves a superuser with the given email, name, tc and password.
      """
      user = self.create_user(
          email,
          password=password,
          name=name,
          father_name=father_name,
          DOB=DOB,
          city=city,
          adress=adress,
          image=image,
          tc=tc,
      )
      user.is_admin = True
      user.save(using=self._db)
      return user

#  Custom User Model
class User(AbstractBaseUser):
  email = models.EmailField(
      verbose_name='Email',
      max_length=255,
      unique=True,
  )
  name = models.CharField(max_length=200)
  father_name=models.CharField( max_length=250)
  password = models.CharField(max_length=255)
  DOB = models.IntegerField()
  city = models.CharField( max_length=150)
  adress = models.CharField( max_length=150)
  image = models.ImageField( upload_to=None, height_field=None, width_field=None, max_length=None)
  tc = models.BooleanField()
  is_active = models.BooleanField(default=True)
  is_admin = models.BooleanField(default=False)
  created_at = models.DateTimeField(auto_now_add=True)
  updated_at = models.DateTimeField(auto_now=True)
  is_deleted = models.DateTimeField( default=0)

  objects = UserManager()

  USERNAME_FIELD = 'email'
  REQUIRED_FIELDS = ['name','father_name','password','DOB','image','city','adress', 'tc']

  def __str__(self):
      return self.email

  def has_perm(self, perm, obj=None):
      "Does the user have a specific permission?"
      # Simplest possible answer: Yes, always
      return self.is_admin

  def has_module_perms(self, app_label):
      "Does the user have permissions to view the app `app_label`?"
      # Simplest possible answer: Yes, always
      return True

  @property
  def is_staff(self):
      "Is the user a member of staff?"
      # Simplest possible answer: All admins are staff
      return self.is_admin




#serializer data
from rest_framework import serializers 
from .models import User

class UserRegistrationSerializer(serializers.ModelSerializer):
  # We are writing this becoz we need confirm password field in our Registratin Request
  password2 = serializers.CharField(style={'input_type':'password'}, write_only=True)
  class Meta:
    model = User
    fields=['email', 'name', 'password', 'password2', 'tc']
    extra_kwargs={
      'password':{'write_only':True}
    }
  # Validating Password and Confirm Password while Registration
  def validate(self, attrs):
    password = attrs.get('password')
    password2 = attrs.get('password2')
    if password != password2:
      raise serializers.ValidationError("Password and Confirm Password doesn't match")
    return attrs

  def create(self, validate_data):
    return User.objects.create_user(**validate_data)
  

class LoginSerializers(serializers.Serializer):
  email = serializers.EmailField(
    max_length = 100,
  
    style={'placeholder': 'Email', 'autofocus': True}
    )
  password = serializers.CharField(
        max_length=100,
        style={'input_type': 'password', 'placeholder': 'Password'}
    )
  remember_me = serializers.BooleanField()

class UserLoginSerializer(serializers.ModelSerializer):
  class Meta:
    model = User
    fields = ('id','email','password') 




#views data



class UserListView(APIView):
    renderer_classes = [TemplateHTMLRenderer]
    template_name = 'user_details.html'

    def get(self, request):
        queryset = User.objects.all()
        return Response({'users': queryset})
    
class UserLoginView(APIView):
    renderer_classes = [TemplateHTMLRenderer]
    template_name = 'login.html'


    def get(self,request,pk):
       user=get_object_or_404(User, pk=pk)
       serializer = LoginSerializers(user)
       return Response({'serializer':serializer,'user':user})
    
    def post(self , request , pk):
       user = get_object_or_404(User,pk=pk)
       serializer= LoginSerializers(user , data=request.data)
       if not serializer.is_valid():
          return Response({'serializer':serializer,'user':user})
       serializer.save()
       return redirect('loginuser')



class UserRegistrationView(APIView):   
    def post(self, request, format=None):
        serializer = UserRegistrationSerializer(data=request.data)
        if serializer.is_valid(raise_exception=True):
           user = serializer.save()
        return Response({ 'msg':'Registration Successful'}, status=status.HTTP_201_CREATED)
        
class UserLoginView(APIView):
  def post(self,request,format=None):
    return Response({'Msg':'Login Success'},status=status.HTTP_200_OK)


def create_user(request):
   if request.method=='POST':
      serializer = UserLoginSerializer(data=request.POST)
      if serializer.is_valid():
         serializer.save()
         return redirect('userlist')
      else:
        serializer=UserLoginSerializer()   
        return render(request,'login.html',{'serializer':serializer}) 